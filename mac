#!/bin/sh

#install with
#bash mac 2>&1 | tee ~/laptop.log && source ~/.rvm/scripts/rvm


# Welcome to the monfresh laptop script!
# Be prepared to turn your laptop (or desktop)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if [ "$file" = "$HOME/.bashrc" ]; then
    if [ -w "$HOME/.bashrc.local" ]; then
      file="$HOME/.bashrc.local"
    else
      file="$HOME/.bashrc"
    fi
  fi

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.bashrc" ]; then
  touch "$HOME/.bashrc"
fi

# shellcheck disable=SC2016
append_to_file "$HOME/.bashrc" 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */bash) : ;;
  *)
    fancy_echo "Changing your shell to bash ..."
      chsh -s "$(which bash)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

brew_is_upgradable() {
  ! brew outdated --quiet "$1" >/dev/null
}

brew_tap_is_installed() {
  brew tap | grep -Fqx "$1"
}

brew_tap() {
  if ! brew_tap_is_installed "$1"; then
    fancy_echo "Tapping $1..."
    brew tap "$1" 2> /dev/null
  fi
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME
  NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

brew_cask_install() {
  if app_is_installed "$1" || brew_cask_is_installed "$1"; then
    fancy_echo "$1 is already installed. Skipping..."
  else
    fancy_echo "Installing $1..."
    brew cask install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_file "$HOME/.bashrc" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew_install_or_upgrade 'git'

brew_tap 'gapple/services'

brew_install_or_upgrade 'postgresql'
fancy_echo 'Restarting postgres...'
brew services restart postgresql

# PhantomJS doesn't support El Capitan yet
# https://github.com/Homebrew/homebrew/issues/42249
if ! sw_vers -productVersion | grep -q "^10\.11"; then
  brew_install_or_upgrade 'phantomjs'
fi

brew_install_or_upgrade 'hub'
# shellcheck disable=SC2016
append_to_file "$HOME/.bashrc" 'eval "$(hub alias -s)"'

append_to_file "$HOME/.gemrc" 'gem: --no-document'

if ! command -v rbenv >/dev/null; then
  if ! command -v rvm >/dev/null; then
    fancy_echo 'Installing RVM and the latest Ruby...'
    curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
    . ~/.rvm/scripts/rvm
  else
    local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
    latest_version="$(curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION)"
    if [ "$local_version" != "$latest_version" ]; then
      fancy_echo 'Upgrading RVM...'
      rvm get stable --auto-dotfiles --autolibs=enable --with-gems="bundler"
    else
      fancy_echo "Already using the latest version of RVM. Skipping..."
    fi
  fi
fi

fancy_echo 'Updating Rubygems...'
gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

#line below installs heroku-toolbelt. Not needed.
#brew_install_or_upgrade 'heroku-toolbelt'

brew_tap 'caskroom/cask'

brew_install_or_upgrade 'brew-cask'

brew_tap 'caskroom/versions'

brew_cask_install 'flux'
brew_cask_install 'github-desktop'
brew_cask_install 'sublime-text3'

# start custom configs
## fine more recipes like below
# brew cask search xxxxx
# brew search xxxxxx


# installs old version of java needed for RStudio. ## ONLY USE IF rjava section below fails
brew_cask_install 'java6'

brew_tap 'homebrew/science'

brew_install_or_upgrade 'r'

#To enable rJava support, run the following command:
#R CMD javareconf JAVA_CPPFLAGS=-I/System/Library/Frameworks/JavaVM.framework/Headers

#If you've installed a version of Java other than the default, you might need to instead use:
#  R CMD javareconf JAVA_CPPFLAGS="-I/System/Library/Frameworks/JavaVM.framework/Headers -I/Library/Java/JavaVirtualMachines/jdk<version>.jdk/"
#(where <version> can be found by running `java -version`, `/usr/libexec/java_home`, or `locate jni.h`), or:
#  R CMD javareconf JAVA_CPPFLAGS="-I/System/Library/Frameworks/JavaVM.framework/Headers -I$(/usr/libexec/java_home | grep -o '.*jdk')"

brew_install_or_upgrade 'Caskroom/cask/rstudio'

brew_cask_install 'slack'

brew_cask_install 'iterm2'

brew_cask_install 'tabula'

brew_cask_install 'pgadmin3'

brew_cask_install 'google-refine'

# Install browsers
brew_cask_install 'firefox'
brew_cask_install 'google-chrome'

#Apparently no longer needed. But this line signs unknown apps allowing OS X users to open it. Leaving this while testing.
#codesign -f -s - ~/Applications/Google\ Refine.app/Contents/MacOS/JavaApplicationStub

# sublime from the command line:
if [ ! -h /usr/local/bin/sublime ]; then
 sudo ln -s "~/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/sublime
fi

# install python
sudo -H python get-pip.py

# install six (Python 2/3 compatibility library) properly with pip
sudo rm -r $( python -c 'import os.path, six; print os.path.dirname(six.__file__)' )/six*
sudo -H pip install six

# install CSVkit
sudo -H pip install csvKit

# Install Groskopf's new Agate tool
sudo -H pip install Agate

# Install AWS command-line tools
sudo -H pip install awscli

# Install various flavors of Ruby via RVM, and ensure they have Bundler
extra_rubies=( 'ruby-1.8.7-p334' 'ruby-1.9.3-p448' )
for i in $(seq 0 $((${#extra_rubies[@]} - 1))); do
  new_ruby=${extra_rubies[$i]}
  rvm install ${new_ruby}
  rvm use ${new_ruby} && gem_install_or_update 'bundler'
done

#Set ruby 1.9.3-p448 as default ruby.
bash -l -c "rvm --default use ruby-1.9.3-p448"

##PHASE II starts below. Still a work in progress.
# PENTAHO
#FIRST INSTALL JAVA JDK 8
#jdk-8u65-macosx-x64.dmg
#PUT IT ON S3
#https://s3.amazonaws.com/associatedpress-datateam-devops/java/jdk-8u65-macosx-x64.dmg
#curl -O https://s3.amazonaws.com/associatedpress-datateam-devops/java/jdk-8u65-macosx-x64.dmg

#THIS WILL MOUNT THE DISK IMAGE
#hdiutil mount jdk-8u65-macosx-x64.dmg

#THIS WILL LAUNCH THE INSTALLER FOR JAVA
#open /volumes/JDK\ 8\ Update\ 65/JDK\ 8\ Update\ 65.pkg

#THEN INSTALL PENTAHO COMMUNITY EDITION
#http://sourceforge.net/projects/pentaho/files/Data%20Integration/6.0/pdi-ce-6.0.1.0-386.zip/download

# end custom configs

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi

append_to_file "$HOME/.rvmrc" 'rvm_auto_reload_flag=2'
append_to_file "$HOME/.rvm/gemsets/global.gems" 'bundler'

# if app_is_installed 'GitHub'; then
#   fancy_echo "It looks like you've already configured your GitHub SSH keys."
#   fancy_echo "If not, you can do it by signing in to the GitHub app on your Mac."
# elif [ ! -f "$HOME/.ssh/github_rsa.pub" ]; then
#   open ~/Applications/GitHub\ Desktop.app
# fi

fancy_echo 'All done!'
